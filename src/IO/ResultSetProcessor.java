package IO;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Date;

import GUI.Table;

/** Responsible for processing data that is found in ResultSets */

public abstract class ResultSetProcessor {

   /** Process and get the result set generated by the query */
   public static void print(ResultSet resultSet) throws SQLException {
      StringBuilder results = new StringBuilder(); // efficient storing

      // if no results are in the resultSet, exit
      if (!resultSet.isBeforeFirst()) {
         IO.displayGUI("No Results.");
         LogSQL.log("   No Results.\r\n");
         return;
      }

      // append the column labels that are contained in the resultSet
      results.append("RESULTS\n");
      results.append("   " + getHeading(resultSet) + "\r\n   ");

      // Print row data while there are still rows left in the resultSet

      new Table(resultSet, resultSet.getMetaData());

      // Process and print row data in String format
      resultSet.beforeFirst();
      while (resultSet.next()) {
         results.append(getRow(resultSet) + "\r\n   ");
      }
      
      // append new line and pass to outputStreams
      LogSQL.log(results.toString());
   }

   /** Print the column labels for each column */
   private static String getHeading(ResultSet resultSet) throws SQLException {
      // Use StringBuilder to make this process more efficient for
      // database tables that contain many columns.
      StringBuilder builder = new StringBuilder();

      // ResultSetMetaData provides access to column labels.
      ResultSetMetaData meta = getMetaData(resultSet);

      int currentColumn = 1; // index of first column
      int columnCount = meta.getColumnCount(); // index of last column

      // Print column labels while there are still columns left
      while (currentColumn <= columnCount) {
         builder.append(meta.getColumnLabel(currentColumn));
         builder.append(", ");
         currentColumn++;
      }
      builder.setLength(builder.length() - 2); // trim the leading hypen

      return builder.toString();
   }

   /** Process a single row of the DB and return the data in String format. */
   private static String getRow(ResultSet resultSet) throws SQLException {
      // Use StringBuilder to make this process more efficient for
      // database tables that contain many columns.
      StringBuilder builder = new StringBuilder();

      // ResultSetMetaData provides access to column labels.
      ResultSetMetaData meta = getMetaData(resultSet);

      int currentColumn = 1; // index of first column
      int columnCount = meta.getColumnCount(); // index of last column

      // Print column content while there are still columns left
      while (currentColumn <= columnCount) {
         if (meta.getColumnName(currentColumn).equals("mstimeOf")) {
            String time = resultSet.getString(currentColumn);
            long msTime = Long.valueOf(time);
            builder.append(new Date(msTime));
         } else {
            builder.append(resultSet.getString(currentColumn));
         }
         builder.append(", ");
         currentColumn++;
      }
      builder.setLength(builder.length() - 2); // trim leading comma

      return builder.toString();
   }

   /** Generate MetaData from the query's result set. */
   private static ResultSetMetaData getMetaData(ResultSet resultSet)
         throws SQLException {
      return resultSet.getMetaData();
   }
}